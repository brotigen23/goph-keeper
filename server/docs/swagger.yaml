basePath: /
definitions:
  Account.DeleteRequest:
    properties:
      id:
        example: 1
        type: integer
    type: object
  Account.Get.Response:
    properties:
      created_at:
        type: string
      id:
        example: 1
        type: integer
      login:
        example: user
        type: string
      metadata:
        example: metadata
        type: string
      password:
        example: user
        type: string
      updated_at:
        type: string
    type: object
  Account.PostRequest:
    properties:
      login:
        example: user
        type: string
      metadata:
        example: metadata
        type: string
      password:
        example: user
        type: string
    type: object
  Account.PutRequest:
    properties:
      id:
        example: 1
        type: integer
      login:
        example: user
        type: string
      metadata:
        example: metadata
        type: string
      password:
        example: user
        type: string
    type: object
  Account.PutResponse:
    properties:
      created_at:
        type: string
      id:
        example: 1
        type: integer
      login:
        example: user
        type: string
      metadata:
        example: metadata
        type: string
      password:
        example: user
        type: string
      updated_at:
        type: string
    type: object
  Binary.DeleteRequest:
    properties:
      id:
        example: 1
        type: integer
    type: object
  Card.DeleteRequest:
    properties:
      id:
        example: 1
        type: integer
    type: object
  Card.PostRequest:
    properties:
      cardholder_name:
        example: IVAN IVANOV
        type: string
      cvv:
        example: "123"
        type: string
      expire:
        example: "2033-01-01T00:00:00.000000Z"
        type: string
      metadata:
        example: metadata
        type: string
      number:
        example: "123456789123456"
        type: string
    type: object
  Card.PutRequest:
    properties:
      cardholder_name:
        example: IVAN IVANOV
        type: string
      cvv:
        example: "123"
        type: string
      expire:
        example: "2033-01-01T00:00:00.000000Z"
        type: string
      id:
        example: 1
        type: integer
      metadata:
        example: metadata
        type: string
      number:
        example: "123456789123456"
        type: string
    type: object
  Login.PostRequest:
    properties:
      login:
        example: user
        type: string
      password:
        example: pass
        type: string
    type: object
  Register.PostRequest:
    properties:
      login:
        example: user
        type: string
      password:
        example: pass
        type: string
    type: object
  Text.DeleteRequest:
    properties:
      id:
        example: 1
        type: integer
    type: object
  Text.PostRequest:
    properties:
      data:
        example: user
        type: string
      metadata:
        example: metadata
        type: string
    type: object
  Text.PutRequest:
    properties:
      data:
        example: user
        type: string
      id:
        example: 1
        type: integer
      metadata:
        example: metadata
        type: string
    type: object
  github_com_brotigen23_goph-keeper_server_internal_dto_binarydto.PostRequest:
    type: object
  github_com_brotigen23_goph-keeper_server_internal_dto_binarydto.PutRequest:
    type: object
host: localhost:8080
info:
  contact: {}
  description: Сервис для хранения и менеджмента пользовательских данных
  title: GophKeeper API
  version: "1.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Создаёт нового пользователя и возвращает JWT токены
      parameters:
      - description: Данные для регистрации
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Login.PostRequest'
      responses:
        "200":
          description: Успешный вход
        "400":
          description: Невалидные данные
          schema: {}
        "409":
          description: Пользователь уже существует
          schema: {}
        "500":
          description: Ошибка сервера
          schema: {}
      summary: Регистрация нового пользователя
      tags:
      - auth
  /register:
    post:
      consumes:
      - application/json
      description: Создаёт нового пользователя и возвращает JWT токены
      parameters:
      - description: Данные для регистрации
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Register.PostRequest'
      responses:
        "200":
          description: Успешная регистрация
        "400":
          description: Невалидные данные
          schema:
            type: string
        "409":
          description: Пользователь уже существует
          schema:
            type: string
        "500":
          description: Ошибка сервера
          schema:
            type: string
      summary: Регистрация нового пользователя
      tags:
      - auth
  /user/accounts:
    post:
      description: Создает новый аккаунт
      parameters:
      - description: Данные для сохранения
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Account.PostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное создание
        "400":
          description: Невалидные данные
          schema:
            type: string
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "409":
          description: Конфликт создания
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Создать новый аккаунт
      tags:
      - accounts
  /user/accounts/:
    delete:
      description: Удаляет аккаунт с входящим ID
      parameters:
      - description: Данные для с id записью
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Account.DeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное удаление
          schema:
            type: string
        "400":
          description: Невалидные данные
          schema:
            type: string
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Удалить существующий аккаунт
      tags:
      - accounts
    put:
      parameters:
      - description: Данные для обновления
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Account.PutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное обновление
          schema:
            $ref: '#/definitions/Account.PutResponse'
        "400":
          description: Невалидные данные
          schema:
            type: string
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Обновить существующий аккаунт
      tags:
      - accounts
  /user/accounts/fetch:
    get:
      description: Возвращает список данных аккаунтов пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Успешное выполнение
          schema:
            items:
              $ref: '#/definitions/Account.Get.Response'
            type: array
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Получить все аккаунты
      tags:
      - accounts
  /user/binary:
    post:
      parameters:
      - description: Данные для сохранения
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/github_com_brotigen23_goph-keeper_server_internal_dto_binarydto.PostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное создание
        "400":
          description: Невалидные данные
          schema:
            type: string
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "409":
          description: Конфликт создания
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Создать бинарные данные
      tags:
      - binary
  /user/binary/:
    delete:
      description: Удаляет запись с входящим ID
      parameters:
      - description: Данные с id записью
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Binary.DeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное удаление
        "400":
          description: Невалидные данные
          schema:
            type: string
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Удалить существующую запись
      tags:
      - binary
    put:
      parameters:
      - description: Данные для Обновления
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/github_com_brotigen23_goph-keeper_server_internal_dto_binarydto.PutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное обновление
        "400":
          description: Невалидные данные
          schema:
            type: string
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Обновить существующую бинарную запись
      tags:
      - binary
  /user/binary/fetch:
    get:
      description: Возвращает список бинарных данных пользователя
      produces:
      - application/json
      responses:
        "200":
          description: Успешное выполнение
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Получить все бинарные данные
      tags:
      - binary
  /user/cards:
    post:
      parameters:
      - description: Данные для сохранения
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Card.PostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное создание
        "400":
          description: Невалидные данные
          schema:
            type: string
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "409":
          description: Конфликт создания
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Создать данные банковской карты
      tags:
      - cards
  /user/cards/:
    delete:
      description: Удаляет запись с входящим ID
      parameters:
      - description: Данные с id записью
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Card.DeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное удаление
        "400":
          description: Невалидные данные
          schema:
            type: string
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Удалить существующую запись
      tags:
      - cards
    put:
      parameters:
      - description: Данные для Обновления
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Card.PutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное обновление
        "400":
          description: Невалидные данные
          schema:
            type: string
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Обновить существующую карту
      tags:
      - cards
  /user/cards/fetch:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Успешное выполнение
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Получить все бинарные данные
      tags:
      - cards
  /user/text:
    post:
      parameters:
      - description: Данные для сохранения
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Text.PostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное создание
        "400":
          description: Невалидные данные
          schema:
            type: string
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "409":
          description: Конфликт создания
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Создать новую запись
      tags:
      - text
  /user/text/:
    delete:
      parameters:
      - description: Данные для обновления
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Text.DeleteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное удаление
        "400":
          description: Невалидные данные
          schema:
            type: string
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Удалить существующую запись
      tags:
      - text
    put:
      parameters:
      - description: Данные для обновления
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/Text.PutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Успешное обновление
        "400":
          description: Невалидные данные
          schema:
            type: string
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Обновить существующую запись
      tags:
      - text
  /user/text/fetch:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Успешное выполнение
        "401":
          description: Ошибка аутентификации
          schema:
            type: string
        "500":
          description: Внутренняя ошибка сервера
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Получить все данные
      tags:
      - text
securityDefinitions:
  ApiKeyAuth:
    description: Введите "Bearer <JWT>", где JWT - ваш access токен
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
