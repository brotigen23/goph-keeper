// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/login": {
            "post": {
                "description": "Создаёт нового пользователя и возвращает JWT токены",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация нового пользователя",
                "parameters": [
                    {
                        "description": "Данные для регистрации",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Login.PostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный вход"
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {}
                    },
                    "409": {
                        "description": "Пользователь уже существует",
                        "schema": {}
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {}
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Создаёт нового пользователя и возвращает JWT токены",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Регистрация нового пользователя",
                "parameters": [
                    {
                        "description": "Данные для регистрации",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Register.PostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешная регистрация"
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Пользователь уже существует",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/accounts": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Создает новый аккаунт",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Создать новый аккаунт",
                "parameters": [
                    {
                        "description": "Данные для сохранения",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account.PostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное создание"
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Конфликт создания",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/accounts/": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Обновить существующий аккаунт",
                "parameters": [
                    {
                        "description": "Данные для обновления",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account.PutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное обновление",
                        "schema": {
                            "$ref": "#/definitions/Account.PutResponse"
                        }
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Удаляет аккаунт с входящим ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Удалить существующий аккаунт",
                "parameters": [
                    {
                        "description": "Данные для с id записью",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account.DeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное удаление",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/accounts/fetch": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает список данных аккаунтов пользователя",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Получить все аккаунты",
                "responses": {
                    "200": {
                        "description": "Успешное выполнение",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Account.Get.Response"
                            }
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/binary": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "binary"
                ],
                "summary": "Создать бинарные данные",
                "parameters": [
                    {
                        "description": "Данные для сохранения",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_brotigen23_goph-keeper_server_internal_dto_binarydto.PostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное создание"
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Конфликт создания",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/binary/": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "binary"
                ],
                "summary": "Обновить существующую бинарную запись",
                "parameters": [
                    {
                        "description": "Данные для Обновления",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_brotigen23_goph-keeper_server_internal_dto_binarydto.PutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное обновление"
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Удаляет запись с входящим ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "binary"
                ],
                "summary": "Удалить существующую запись",
                "parameters": [
                    {
                        "description": "Данные с id записью",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Binary.DeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное удаление"
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/binary/fetch": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Возвращает список бинарных данных пользователя",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "binary"
                ],
                "summary": "Получить все бинарные данные",
                "responses": {
                    "200": {
                        "description": "Успешное выполнение"
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/cards": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Создать данные банковской карты",
                "parameters": [
                    {
                        "description": "Данные для сохранения",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Card.PostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное создание"
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Конфликт создания",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/cards/": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Обновить существующую карту",
                "parameters": [
                    {
                        "description": "Данные для Обновления",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Card.PutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное обновление"
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Удаляет запись с входящим ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Удалить существующую запись",
                "parameters": [
                    {
                        "description": "Данные с id записью",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Card.DeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное удаление"
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/cards/fetch": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Получить все бинарные данные",
                "responses": {
                    "200": {
                        "description": "Успешное выполнение"
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/text": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "text"
                ],
                "summary": "Создать новую запись",
                "parameters": [
                    {
                        "description": "Данные для сохранения",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Text.PostRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное создание"
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Конфликт создания",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/text/": {
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "text"
                ],
                "summary": "Обновить существующую запись",
                "parameters": [
                    {
                        "description": "Данные для обновления",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Text.PutRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное обновление"
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "text"
                ],
                "summary": "Удалить существующую запись",
                "parameters": [
                    {
                        "description": "Данные для обновления",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Text.DeleteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное удаление"
                    },
                    "400": {
                        "description": "Невалидные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/text/fetch": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "text"
                ],
                "summary": "Получить все данные",
                "responses": {
                    "200": {
                        "description": "Успешное выполнение"
                    },
                    "401": {
                        "description": "Ошибка аутентификации",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Account.DeleteRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "Account.Get.Response": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "login": {
                    "type": "string",
                    "example": "user"
                },
                "metadata": {
                    "type": "string",
                    "example": "metadata"
                },
                "password": {
                    "type": "string",
                    "example": "user"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "Account.PostRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "user"
                },
                "metadata": {
                    "type": "string",
                    "example": "metadata"
                },
                "password": {
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "Account.PutRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "login": {
                    "type": "string",
                    "example": "user"
                },
                "metadata": {
                    "type": "string",
                    "example": "metadata"
                },
                "password": {
                    "type": "string",
                    "example": "user"
                }
            }
        },
        "Account.PutResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "login": {
                    "type": "string",
                    "example": "user"
                },
                "metadata": {
                    "type": "string",
                    "example": "metadata"
                },
                "password": {
                    "type": "string",
                    "example": "user"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "Binary.DeleteRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "Card.DeleteRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "Card.PostRequest": {
            "type": "object",
            "properties": {
                "cardholder_name": {
                    "type": "string",
                    "example": "IVAN IVANOV"
                },
                "cvv": {
                    "type": "string",
                    "example": "123"
                },
                "expire": {
                    "type": "string",
                    "example": "2033-01-01T00:00:00.000000Z"
                },
                "metadata": {
                    "type": "string",
                    "example": "metadata"
                },
                "number": {
                    "type": "string",
                    "example": "123456789123456"
                }
            }
        },
        "Card.PutRequest": {
            "type": "object",
            "properties": {
                "cardholder_name": {
                    "type": "string",
                    "example": "IVAN IVANOV"
                },
                "cvv": {
                    "type": "string",
                    "example": "123"
                },
                "expire": {
                    "type": "string",
                    "example": "2033-01-01T00:00:00.000000Z"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "metadata": {
                    "type": "string",
                    "example": "metadata"
                },
                "number": {
                    "type": "string",
                    "example": "123456789123456"
                }
            }
        },
        "Login.PostRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "user"
                },
                "password": {
                    "type": "string",
                    "example": "pass"
                }
            }
        },
        "Register.PostRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "user"
                },
                "password": {
                    "type": "string",
                    "example": "pass"
                }
            }
        },
        "Text.DeleteRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "Text.PostRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "user"
                },
                "metadata": {
                    "type": "string",
                    "example": "metadata"
                }
            }
        },
        "Text.PutRequest": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string",
                    "example": "user"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "metadata": {
                    "type": "string",
                    "example": "metadata"
                }
            }
        },
        "github_com_brotigen23_goph-keeper_server_internal_dto_binarydto.PostRequest": {
            "type": "object"
        },
        "github_com_brotigen23_goph-keeper_server_internal_dto_binarydto.PutRequest": {
            "type": "object"
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Введите \"Bearer \u003cJWT\u003e\", где JWT - ваш access токен",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "GophKeeper API",
	Description:      "Сервис для хранения и менеджмента пользовательских данных",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
